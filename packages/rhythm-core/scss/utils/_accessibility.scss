// ==========================================================================
// ACCESSIBLE FUNCTIONAL CLASSES
// ==========================================================================

.accessibility-links {
	position: relative;
	list-style: none;
	padding: 0;
	margin: 0;
	z-index: 1000;

	li {
		position: absolute;
		top: 10px;
		left: 10px;
		margin: 0;
	}

	a {
		position: absolute;
		margin-left: -9999px;
		white-space: nowrap;
		padding: 0 4px;

		&:focus,
		&:active {
			margin-left: 0;
			background: $white;
		}
	}
}

.inline-accessible {
	position: absolute;
	left: -9999px;
	display: block;
	margin-bottom: 14px;

	&:hover,
	&:focus,
	&:active {
		position: static;
		left: auto;
	}
}

// H5BP FUNCTIONAL CLASSES

// Image replacement
// Instructions: http://bit.ly/2iu1hC0
.ir {
	background-color: transparent;
	border: 0;
	overflow: hidden;
}

.ir:before {
	content: "";
	display: block;
	width: 0;
	height: 100%;
}

// Hide from both screenreaders and browsers: h5bp.com/u
.hidden {
	display: none !important;
	visibility: hidden;
}

// Hide only visually, but have it available for screenreaders: h5bp.com/v
.vh,
.vhidden,
.visuallyhidden {
	@include visuallyhidden();

	// Extends the .vhidden class to allow the element to be focusable
	// when navigated to via the keyboard: h5bp.com/p
	&.focusable:active,
	&.focusable:focus {
		@include undovisuallyhidden();
	}
}

.supports-js .js-hidden {
	display: none;
}

.supports-no-js .no-js-hidden {
	display: none;
}

// Hide visually and from screenreaders, but maintain layout
.invisible {
	visibility: hidden;
}

// CLEARFIX

// Apply the cf code to the included elements - this means you don't need to
// use class cf all over the place
.cf,
.clearfix {
	@include clearfix-micro();
}

// INTRINSIC RATIO

//	<div class="intrinsic">
//		<div class="intrinsic-wrap">
//			<div class="intrinsic-el">
//			</div>
//		</div>
//	</div>

.intrinsic {
	// You just need to define width within another class on the element,
	// if not a inherited by default (ie: <div/> or any class with a
	// display: block or default width of auto or 100%)
}

.intrinsic-wrap {
	height: 0;
	position: relative;
}

// This class needs no further customization,
// if this class is applied to the element and is contained
// within .intrinsic > .intrinsic-wrap > *current element*
// the element should scale in correct perspective
.intrinsic-el {
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	position: absolute;
}
